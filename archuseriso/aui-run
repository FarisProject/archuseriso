#!/usr/bin/env bash
#
# Copyright (C) 2020 David Runge <dvzrv@archlinux.org>
# Copyright (C) 2021 Laurent Jourden <laurent85@enarel.fr>
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# A simple script to run a bootable iso image or a bootable
# usb drive using qemu. Both BIOS and UEFI booting is 
# supported.
#
# Requirements:
# - qemu
# - edk2-ovmf (when UEFI booting)


set -eu

isoimage=''
usbdrive=''

print_help() {
    local usagetext
    IFS='' read -r -d '' usagetext <<EOF || true
Usage:
    aui-run [options]

Options:
    -a                   set accessibility support using brltty (console profile only)
    -b, --bios           set boot type to 'BIOS' (default)
    -d, --usb [device]   set usb block device to boot from
    -h, --help           print help
    -i, --iso [image]    image to boot into
    -k, --iso-hd         set image type to hard disk instead of optical disc
    -s, --sb             use Secure Boot (only relevant when using UEFI)
    -u, --uefi           set boot type to 'UEFI'

Examples:
    Run an image using UEFI:
    $ aui-run --uefi --iso aui-xfce-linux_5_10_5-0108-x64.iso 
    Run a bootable usb drive using UEFI:
    $ sudo aui-run --uefi --usb /dev/sdc
EOF
    printf '%s' "${usagetext}"
}

cleanup_working_dir() {
    if [[ -d "${working_dir}" ]]; then
        rm -rf -- "${working_dir}"
    fi
}

copy_ovmf_vars() {
    if [[ ! -f '/usr/share/edk2-ovmf/x64/OVMF_VARS.fd' ]]; then
        printf 'ERROR: %s\n' "OVMF_VARS.fd not found. Install edk2-ovmf."
        exit 1
    fi
    cp -av -- '/usr/share/edk2-ovmf/x64/OVMF_VARS.fd' "${working_dir}/"
}

_checks() {
    if [[ -z "${isoimage}" && -z "${usbdrive}" ]]; then
        printf 'ERROR: %s\n' "No iso image or usb device specified!"
        exit 1
    fi
    if [[ -n "${isoimage}" && -n "${usbdrive}" ]]; then
        printf 'ERROR: %s\n' "iso image and usb device are mutually exclusive!"
        exit 1
    fi
    if [[ -n "${isoimage}" && ! -f "$image" ]]; then
        printf 'ERROR: %s\n' "Image file (${image}) does not exist."
        exit 1
    fi
    if [[ -n "${usbdrive}" && ! $(stat -c %t "${device}" 2> /dev/null) -eq 8 ]]; then
        echo "Error: ${device} is not a block device!"
        exit 1
    fi
    if [[ -n "${usbdrive}" && ! $(lsblk -dnro hotplug "${device}" 2> /dev/null) -eq 1 ]]; then
        echo "Error: ${device} is not a removable block device!"
        exit 1
    fi
    if [[ -n "${usbdrive}" && ! "$(lsblk -dnro tran "${device}" 2> /dev/null)" == 'usb' ]]; then
        echo "Error: ${device} is not a usb device!"
        exit 1
    fi
}

_run() {
    if [[ "$boot_type" == 'uefi' ]]; then
        copy_ovmf_vars
        if [[ "${secure_boot}" == 'on' ]]; then
            printf '%s\n' 'Using Secure Boot'
            local ovmf_code='/usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd'
        else
            local ovmf_code='/usr/share/edk2-ovmf/x64/OVMF_CODE.fd'
        fi
        qemu_options+=(
            '-drive' "if=pflash,format=raw,unit=0,file=${ovmf_code},readonly"
            '-drive' "if=pflash,format=raw,unit=1,file=${working_dir}/OVMF_VARS.fd"
            '-global' "driver=cfi.pflash01,property=secure,value=${secure_boot}"
        )
    fi

    if [[ "${accessibility}" == 'on' ]]; then
        qemu_options+=(
            '-chardev' 'braille,id=brltty'
            '-device' 'usb-braille,id=usbbrl,chardev=brltty'
        )
    fi

    if [[ "${isoimage}" == 'yes' ]]; then
        qemu_options+=(
            '-device' 'virtio-scsi-pci,id=scsi0'
            '-device' "scsi-${mediatype%rom},bus=scsi0.0,drive=${mediatype}0"
	    '-drive' "id=${mediatype}0,if=none,format=raw,media=${mediatype/hd/disk},readonly=on,file=${image}"
        )
    fi

    if [[ "${usbdrive}" == 'yes' ]]; then
        device="/sys/block/${device##*/}"
        device="$(readlink "${device}")"
        device="${device#*usb}"
        device="${device#*\/}"
        device="${device%%/*}"
        device="$(grep DEVNAME /sys/bus/usb/devices/"${device}"/uevent)"
        device="${device/DEVNAME=//dev/}"
        qemu_options+=(
            '-device' 'qemu-xhci,id=xhci'
            '-device' "usb-host,bus=xhci.0,hostdevice=${device}"
        )
    fi

    qemu-system-x86_64 \
        -boot order=d,menu=on,reboot-timeout=5000 \
        -m "size=3072,slots=0,maxmem=$((3072*1024*1024))" \
        -k en \
        -name archiso,process=archiso_0 \
        -display sdl \
        -vga virtio \
        -audiodev pa,id=snd0 \
        -device ich9-intel-hda \
        -device hda-output,audiodev=snd0 \
        -device virtio-net-pci,romfile=,netdev=net0 -netdev user,id=net0 \
        -machine type=q35,smm=on,accel=kvm,usb=on,pcspk-audiodev=snd0 \
        -global ICH9-LPC.disable_s3=1 \
        -enable-kvm \
        "${qemu_options[@]}" \
        -serial stdio \
        -no-reboot
}

image=''
accessibility=''
boot_type='bios'
mediatype='cdrom'
secure_boot='off'
qemu_options=()
working_dir="$(mktemp -dt auirun.XXXXXXXX)"
trap cleanup_working_dir EXIT

OPTS=$(getopt -o     'abd:hi:ksu' \
	      --long 'bios,usb:,help,iso:,iso-hd,uefi,sb' \
	      -n 'aui-run' -- "$@")
[[ $? -eq 0 ]] || { print_help; exit 1; }
eval set -- "${OPTS}"

unset OPTS
[[ $# -eq 1 ]] && { print_help; exit 1; }

while true; do
    case "${1}" in
            '-a')
                accessibility='on'
                shift ;;
            '-b'|'--bios')
                boot_type='bios'
                shift ;;
            '-d'|'--usb')
                usbdrive='yes'
                device="${2}"
                shift 2 ;;
            '-h'|'--help')
                print_help
                exit 0
                ;;
            '-i'|'--iso')
                isoimage='yes'
                image="${2}"
                shift 2 ;;
            '-k'|'--iso-hd')
                mediatype='hd'
                shift ;;
            '-s'|'--sb')
                secure_boot='on'
                shift ;;
            '-u'|'--uefi')
                boot_type='uefi'
                shift ;;
            '--')
                shift
                break 
                exit 1 ;;
    esac
done

_checks
_run
